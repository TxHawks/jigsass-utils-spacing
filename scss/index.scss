// *************************************
//
// # jigsass-utils-spacing
// -> A collection of dynamically generated spacing utility classes
//
// Author: TxHawks (tofu.hawks@gmail.com)
// https://txhawks.github.io/jigsass-utils-spacing
//
// *************************************

@charset 'UTF-8';


// -------------------------------------
// Dependencies
// -------------------------------------

@if (not mixin-exists(jigsass-define-util)) {
  @error '`jigsass-utils-spacing` has a dependency on `jigsass-tools-selectors`. ' +
    'Please import it before this file.';
}





// -------------------------------------
// Introduction
// -------------------------------------

// stylelint-disable
/* ---
section: Spacing Utils
title: Introduction
order: -10
---

[![NPM version][npm-image]][npm-url]
[![Dependency Status][daviddm-image]][daviddm-url]

A collection of dynamically generated spacing utility classes.

Class names follow the [Emmet](http://docs.emmet.io/cheat-sheet/) abbreviation
syntax, with colons (':') replaced by two dashes (`--`) to follow BEM naming
conventions.

#### Available classes

  - `.u-m--<amount>`: margin
  - `.u-mt--<amount>`: margin top
  - `.u-me--<amount>`: margin end (right in `LTR`, left in `RTL`)
  - `.u-mb--<amount>`: margin bottom
  - `.u-ms--<amount>`: margin start (left in `LTR`, right in `RTL`)
  - `.u-mh--<amount>`: horizontal margins (left and right)
  - `.u-mv--<amount>`: vertical margins (top and bottom)
  - `.u-mr--<amount>`: margin right
  - `.u-ml--<amount>`: margin left

  - `.u-p--<amount>`: padding
  - `.u-pt--<amount>`: padding top
  - `.u-pe--<amount>`: padding end (right in `LTR`, left in `RTL`)
  - `.u-pb--<amount>`: padding bottom
  - `.u-ps--<amount>`: padding start (left in `LTR`, right in `RTL`)
  - `.u-ph--<amount>`: horizontal padding
  - `.u-pv--<amount>`: vertical padding
  - `.u-pr--<amount>`: padding right
  - `.u-pl--<amount>`: padding left


Where `<amount>` can be either a unitless number representing a number of
typographic rhythm units as defined in
[$jigsass-sizes](https://txhawks.github.io/jigsass-tools-typography/#variable-jigsass-sizes)
a percentage, or a length specified in pixels.

JigSass Spacing supports negative margins, using `min-<number>` modifiers
(e.g., `h-mt--min-4`), as well as auto margins (e.g., `h-m--auto`).

Additionally, JigSass Spacing provide the autospace (`.u-autospace`) set of helper classes
for intelligently spacing an element's direct descendants:


  - `.u-autospace--<amount>`
  - `.u-autospace--<amount>(<n>up)`


`.u-autospace--<amount>` classes will give all but the first direct descendant of the element carrying the
class a `margin-top` of `<amount>`.

Similarly, `.u-autospace--<amount>(<n>up)` classes will give all but the `n` direct descendants of the
element carrying the class a `margin-top` of `<amount>`, allowing for intelligent spacing of
grid-like layouts.

For an in-depth presentation of the technique, see
[this article](http://alistapart.com/article/axiomatic-css-and-lobotomized-owls) by Heydon Pickering.

#### Installation

Using npm:

```sh
npm i -S jigsass-utils-spacing
```

#### Usage
Import JigSass Utils Spacing into your main scss file near its very end, together with all
other utilities (utilities should always be the last to be imported).

```scss
@import 'path/to/jigsass-utils-spacing/scss/index';
```

Like all other JigSass Utils, JigSass Spacing does not automatically generate any CSS
when imported. You would need to explicitly indicate that each individual spacing
class should actually be generated in each component or object it is used in
(clarification: This will include style declarations inside `.foo` and .`bar`):

```scss
// _c.foo.scss
.foo {
  @include jigsass-util(u-mt, $modifier: 6px); // <-- margin-top: 6px

  ...
}
```

```scss
// _c.bar.scss
.bar {
  @include jigsass-util(u-pb, $modifier: 12px);  // <-- padding-bottom: 12px
  @include jigsass-util(u-m, $modifier: 0, $from: large); // <-- margin: 0 from large bp and on.

  ...
}
```

Doing so helps us a great deal with portability, as no matter where we import component or object
partials, the correct utility classes will be generated. Think of it as a poor man's dependency
management.

Developer communication is also assisted by including "dependencies" wherever they are required,
as anyone going through a partial, can easily understand how it should be marked up with just a
glance.

As far as bloat goes, just don't worry about it - the actual styles will only be generated once,
at the location in the cascade where the Jigsass Spacing partial was imported into the main file.


JigSass Spacing classes are responsive-enabled, using [JigSass MQ](https://txhawks.github.io/jigsass-tools-mq/)
and the breakpoints defined in the [$jigsass-breakpoints](https://txhawks.github.io/jigsass-tools-mq/#variable-jigsass-breakpoints) variable.

Based on the breakpoint arguments passed to `jigsass-util` when including a Spacing class,
responsive modifiers are generated according to the following logic:

```scss
.u-m--<modifier>[-[-from-<breakpoint-name>][-until-<breakpoint-name>][-misc-<breakpoint-name>]]
```

So, assuming the `medium`, `large` and `landscape` breakpoints are defined in `$jigsass-breakpoints`
as `600px`, `1024px` and `(orientation: landscape)` respectively,

```scss
@include jigsass-util(u-m, $modifier: 2);
```
will generate the `.u-m--2` class, which is not limited to any media-query.

```scss
@include jigsass-util(u-p, $modifier: 4, $until: medium);
```

will generate the `.u-p--4--until-medium` class, which will be in effect at
`(max-width: 37.49em)` and will override styles in the default class until that point.

```scss
@include jigsass-util(u-mb, $modifier: 12px, $from: large, $misc: landscape);
```

will generate the `.u-mb--12px--from-large-when-landscape` class, which will go into
effect at `(min-width: 64em) and (orientation: landscape)` and will override styles in the default
class under these  conditions.


**License:** MIT



[npm-image]: https://badge.fury.io/js/jigsass-utils-spacing.svg
[npm-url]: https://npmjs.org/package/jigsass-utils-spacing

[daviddm-image]: https://david-dm.org/TxHawks/jigsass-utils-spacing.svg?theme=shields.io
[daviddm-url]: https://david-dm.org/TxHawks/jigsass-utils-spacing
*/
// stylelint-enable





// -------------------------------------
// Variables
// -------------------------------------

/// A constant used for generating spacing utility classes.
/// ---
/// @type Map
/// ---
$_jigsass-spacing-directions: (
  u-m: margin,
  u-mt: margin-top,
  u-me: margin-end,
  u-mb: margin-bottom,
  u-ms: margin-start,
  u-mh: margin-left margin-right,
  u-mv: margin-bottom margin-top,
  u-mr: margin-right,
  u-ml: margin-left,
  u-p: padding,
  u-pt: padding-top,
  u-pe: padding-end,
  u-pb: padding-bottom,
  u-ps: padding-start,
  u-ph: padding-left padding-right,
  u-pv: padding-bottom padding-top,
  u-pr: padding-right,
  u-pl: padding-left,
);

/// A constant used for generating spacing doclets.
/// ---
/// @type Map
/// ---
$_jigsass-spacing-translation: (
  u-m: 'margin on all sides',
  u-mt: 'top margin',
  u-me: 'margin on the horizontal end',
  u-mb: 'bottom margin',
  u-ms: 'margin on the horizontal start',
  u-mh: 'horizontal (left and right) margins',
  u-mv: 'vertical (top and bottom) margins',
  u-mr: 'right margin',
  u-ml: 'left margin',
  u-p: 'padding',
  u-pt: 'top padding',
  u-pe: 'padding on the horizontal end',
  u-pb: 'bottom padding',
  u-ps: 'padding on the horizontal start',
  u-ph: 'horizontal (left and right) padding',
  u-pv: 'vertical (tiop and bottom) padding',
  u-pr: 'right padding',
  u-pl: 'left padding',
);


// Used internally to store doclets
$_doclet-store: () !default;

// Used internally to ordering doclets
$_jigsass-util-spacing-i: 1;
$_jigsass-util-spacing-addition: (
  u-m: 100,
  u-mt: 200,
  u-me: 300,
  u-mb: 400,
  u-ms: 500,
  u-mh: 600,
  u-mv: 700,
  u-mr: 800,
  u-ml: 900,
  u-p: 1000,
  u-pt: 1100,
  u-pe: 1200,
  u-pb: 1300,
  u-ps: 1400,
  u-ph: 1500,
  u-pv: 1600,
  u-pr: 1700,
  u-pl: 1800,
);



// -------------------------------------
// Definitions
// -------------------------------------

// Auto space
@include jigsass-define-util('u-autospace') {
  @if(not $jigsass-util-modifier) {
    @error 'jigsass-utils-spacing: #{$jigsass-util-name} must be passed a ' +
      'spacing length as a modifier.';
  }
  $modifier: $jigsass-util-modifier;
  $columns: false;

  @if (type-of($modifier) != number) {
    $parsed-mod-values: jigsass-parse-modifier($jigsass-util-modifier);
    $modifier: jigsass-str-to-number(map-get($parsed-mod-values, modifier));

    @if (type-of($modifier) != number) {
      @error 'jigsass-utils-spacing: #{$jigsass-util-name} must be passed a ' +
        'spacing length as a modifier. #{$modifier} is a #{type-of($modifier)}';
    }

    $arg: nth(map-get($parsed-mod-values, args), 1);
    $columns: jigsass-str-to-number(str-slice($arg, 1, str-length($arg) - 2));
  }

  > * + * {
    @if ($columns) {
      $nth: $columns  + 1;

      &:nth-child(n+#{$nth}) {
        @if (unitless($modifier)) {
          @include jigsass-rem(margin-top, jigsass-rhythm($modifier, $unit: rem));
        }
        @else {
          margin-top: $modifier;
        }
      }
    }

    @else if (unitless($modifier)) {
      @include jigsass-rem(margin-top, jigsass-rhythm($modifier, $unit: rem));
    }
    @else {
      margin-top: $modifier;
    }

    $_doclet: $jigsass-util-name + ($jigsass-util-modifier or '');
    @if (not index($_doclet-store, $_doclet)) {
      $_doclet-store: append($_doclet-store, $_doclet) !global;
      // stylelint-disable
/* ---
section: Spacing Utils
title: #{$jigsass-util-name}--#{$jigsass-util-modifier}
order: #{$_jigsass-util-spacing-i}
---
A utility class to intelligently space the direct descendants of an element.

#### Include with:

```scss
@include jigsass-util(#{$jigsass-util-name}, $modifier: #{$jigsass-util-modifier} [, $from, $until, $misc]);
```

#### Example

```example:html
<div class='fpo--b #{if($columns, fpo--autospace + $columns, '')} #{$jigsass-util-name}--#{$jigsass-util-modifier}'>
  <div><div class='fpo'></div></div>
  <div><div class='fpo'></div></div>
  <div><div class='fpo'></div></div>
  <div><div class='fpo'></div></div>
  #{if($columns and $columns > 3, "<div><div class='fpo'></div></div>", '')}
  #{if($columns and $columns > 4, "<div><div class='fpo'></div></div>", '')}
  #{if($columns and $columns > 5, "<div><div class='fpo'></div></div>", '')}
  #{if($columns and $columns > 6, "<div><div class='fpo'></div></div>", '')}
  #{if($columns and $columns > 7, "<div><div class='fpo'></div></div>", '')}
  #{if($columns and $columns > 8, "<div><div class='fpo'></div></div>", '')}
  #{if($columns and $columns > 9, "<div><div class='fpo'></div></div>", '')}
  #{if($columns and $columns > 10, "<div><div class='fpo'></div></div>", '')}
  #{if($columns and $columns > 11, "<div><div class='fpo'></div></div>", '')}
</div>
```
*/
      // stylelint-enable
      $_jigsass-util-spacing-i: $_jigsass-util-spacing-i + 1 !global;
    }
  }
}


// Spacing
@each $direction, $properties in $_jigsass-spacing-directions {
  @include jigsass-define-util($direction) {
    $_type: if(str-slice($jigsass-util-name, 3, 3) == m, margin, padding);

    @if(not $jigsass-util-modifier) {
      @error 'jigsass-utils-spacing: #{$jigsass-util-name} must be passed a ' +
        'spacing length as a modifier.';
    }

    $_auto: $jigsass-util-modifier == auto;
    $_neg: type-of($jigsass-util-modifier) != number and
      str-index($jigsass-util-modifier, min-) == 1;
    $_modifier: if(
      $_neg,
      jigsass-str-to-number(str-slice($jigsass-util-modifier, 4)),
      $jigsass-util-modifier
    );

    @if(
      (not index(auto none, $_modifier)) and
      type-of($_modifier) != number
    ) {
      @error 'jigsass-utils-spacing: A length modifier must be `auto`, `none`, ' +
        'a css length or a unitless number. \a' +
        'You are trying to pass the #{type-of($_modifier)} `#{$jigsass-util-modifier}`.';
    }

    $props: map-get($_jigsass-spacing-directions, $jigsass-util-name);
    @each $property in $props {
      // When length is in rhythm units
      @if (not index(auto none, $_modifier) and unitless($_modifier)) {
        @if (str-slice($property, -5) == start) {
          @include jigsass-bidi(
            $property,
            jigsass-rhythm($_modifier, $unit: rem),
            $rem: true
          );

          [dir=ltr] & {
            @include jigsass-rem(
              #{str-slice($property, 1, -7)}-left,
              jigsass-rhythm($_modifier, $unit: rem)
            );
          }

          [dir=rtl] & {
            @include jigsass-rem(
              #{str-slice($property, 1, -7)}-right,
              jigsass-rhythm($_modifier, $unit: rem)
            );
          }
        }
        @else if (str-slice($property, -3) == end) {
          @include jigsass-bidi(
            $property,
            jigsass-rhythm($_modifier, $unit: rem),
            $rem: true
          );

          [dir=ltr] & {
            @include jigsass-rem(
              #{str-slice($property, 1, -5)}-right,
              jigsass-rhythm($_modifier, $unit: rem)
            );
          }

          [dir=rtl] & {
            @include jigsass-rem(
              #{str-slice($property, 1, -5)}-left,
              jigsass-rhythm($_modifier, $unit: rem)
            );
          }
        }
        @else {
          @include jigsass-rem(
            $property,
            jigsass-rhythm($_modifier, $unit: rem)
          );
        }
      }

      // When modifier is auto, none or length isn't unitless numbers
      @else {
        $_modifier: if(type-of($_modifier) == string, unquote($_modifier), $_modifier);

        @if (str-slice($property, -5) == start) {
          @include jigsass-bidi($property, $_modifier, $rem: false);

          [dir=ltr] & {
            #{str-slice($property, 1, -7)}-left: $_modifier;
          }

          [dir=rtl] & {
            #{str-slice($property, 1, -7)}-right: $_modifier;
          }
        }
        @else if (str-slice($property, -3) == end) {
          @include jigsass-bidi($property, $_modifier, $rem: false);

          [dir=ltr] & {
            #{str-slice($property, 1, -5)}-right: $_modifier;
          }

          [dir=rtl] & {
            #{str-slice($property, 1, -5)}-left: $_modifier;
          }
        }
        @else {
          #{$property}: $_modifier;
        }
      }
    }

    $_doclet: $jigsass-util-name + ($jigsass-util-modifier or '');
    @if (not index($_doclet-store, $_doclet)) {
      $_doclet-store: append($_doclet-store, $_doclet) !global;
      // stylelint-disable
/* ---
section: Spacing Utils
title: #{$jigsass-util-name}--#{$jigsass-util-modifier}
order: #{$_jigsass-util-spacing-i + map-get($_jigsass-util-spacing-addition, $jigsass-util-name)}
---
A utility class to set the #{map-get($_jigsass-spacing-translation, $jigsass-util-name)} of
an element.

#### Include with:

```scss
@include jigsass-util(#{$jigsass-util-name}, $modifier: #{$jigsass-util-modifier} [, $from, $until, $misc]);
```

#### Example

```example:html
<div class='fpo--b'>
  <div class='fpo  #{$jigsass-util-name}--#{$jigsass-util-modifier}'>
    This element has #{
      if(
        $_auto,
        auto,
        if(unit($_modifier) == px, a $_modifier pixels, a $_modifier rhythm units)
      )
    } #{map-get($_jigsass-spacing-translation, $jigsass-util-name)}.
  </div>
</div>
```
*/
      // stylelint-enable
      $_jigsass-util-spacing-i: $_jigsass-util-spacing-i + 1 !global;
    }
  }
}
